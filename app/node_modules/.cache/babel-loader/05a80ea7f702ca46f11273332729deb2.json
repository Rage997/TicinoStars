{"ast":null,"code":"export function getEmptyPickingInfo({\n  pickInfo,\n  mode,\n  viewports,\n  layerFilter,\n  pixelRatio,\n  x,\n  y,\n  z\n}) {\n  const layer = pickInfo && pickInfo.pickedLayer;\n\n  const viewportFilter = layerFilter && layer && (v => layerFilter({\n    layer,\n    viewport: v,\n    isPicking: true,\n    renderPass: \"picking:\".concat(mode)\n  }));\n\n  const viewport = getViewportFromCoordinates(viewports, {\n    x,\n    y\n  }, viewportFilter);\n  const coordinate = viewport && viewport.unproject([x - viewport.x, y - viewport.y], {\n    targetZ: z\n  });\n  return {\n    color: null,\n    layer: null,\n    viewport,\n    index: -1,\n    picked: false,\n    x,\n    y,\n    pixel: [x, y],\n    coordinate,\n    devicePixel: pickInfo && [pickInfo.pickedX, pickInfo.pickedY],\n    pixelRatio\n  };\n}\nexport function processPickInfo(opts) {\n  const {\n    pickInfo,\n    lastPickedInfo,\n    mode,\n    layers\n  } = opts;\n  const {\n    pickedColor,\n    pickedLayer,\n    pickedObjectIndex\n  } = pickInfo;\n  const affectedLayers = pickedLayer ? [pickedLayer] : [];\n\n  if (mode === 'hover') {\n    const lastPickedObjectIndex = lastPickedInfo.index;\n    const lastPickedLayerId = lastPickedInfo.layerId;\n    const pickedLayerId = pickedLayer && pickedLayer.props.id;\n\n    if (pickedLayerId !== lastPickedLayerId || pickedObjectIndex !== lastPickedObjectIndex) {\n      if (pickedLayerId !== lastPickedLayerId) {\n        const lastPickedLayer = layers.find(layer => layer.props.id === lastPickedLayerId);\n\n        if (lastPickedLayer) {\n          affectedLayers.unshift(lastPickedLayer);\n        }\n      }\n\n      lastPickedInfo.layerId = pickedLayerId;\n      lastPickedInfo.index = pickedObjectIndex;\n      lastPickedInfo.info = null;\n    }\n  }\n\n  const baseInfo = getEmptyPickingInfo(opts);\n  const infos = new Map();\n  infos.set(null, baseInfo);\n  affectedLayers.forEach(layer => {\n    let info = { ...baseInfo\n    };\n\n    if (layer === pickedLayer) {\n      info.color = pickedColor;\n      info.index = pickedObjectIndex;\n      info.picked = true;\n    }\n\n    info = getLayerPickingInfo({\n      layer,\n      info,\n      mode\n    });\n\n    if (layer === pickedLayer && mode === 'hover') {\n      lastPickedInfo.info = info;\n    }\n\n    infos.set(info.layer.id, info);\n\n    if (mode === 'hover') {\n      info.layer.updateAutoHighlight(info);\n    }\n  });\n  return infos;\n}\nexport function getLayerPickingInfo({\n  layer,\n  info,\n  mode\n}) {\n  while (layer && info) {\n    const sourceLayer = info.layer || null;\n    info.sourceLayer = sourceLayer;\n    info.layer = layer;\n    info = layer.getPickingInfo({\n      info,\n      mode,\n      sourceLayer\n    });\n    layer = layer.parent;\n  }\n\n  return info;\n}\n\nfunction getViewportFromCoordinates(viewports, pixel, filter) {\n  for (let i = viewports.length - 1; i >= 0; i--) {\n    const viewport = viewports[i];\n\n    if (viewport.containsPixel(pixel) && (!filter || filter(viewport))) {\n      return viewport;\n    }\n  }\n\n  return viewports[0];\n}","map":{"version":3,"sources":["../../../../src/lib/picking/pick-info.js"],"names":["z","layer","pickInfo","viewportFilter","v","layerFilter","viewport","isPicking","renderPass","getViewportFromCoordinates","y","coordinate","x","targetZ","color","index","picked","pixel","devicePixel","pixelRatio","layers","pickedObjectIndex","affectedLayers","pickedLayer","mode","lastPickedObjectIndex","lastPickedInfo","lastPickedLayerId","pickedLayerId","lastPickedLayer","baseInfo","getEmptyPickingInfo","infos","info","getLayerPickingInfo","sourceLayer","i","viewports","filter"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// Even if nothing gets picked, we need to expose some information of the picking action:\n// x, y, coordinates etc.\nexport function getEmptyPickingInfo({pickInfo, mode, viewports, layerFilter, pixelRatio, x, y, z}) {\n  const layer = pickInfo && pickInfo.pickedLayer;\n  const viewportFilter =\n    layerFilter &&\n    layer &&\n    (v =>\n      layerFilter({\n        layer,\n        viewport: v,\n        isPicking: true,\n        renderPass: `picking:${mode}`\n      }));\n  const viewport = getViewportFromCoordinates(viewports, {x, y}, viewportFilter);\n  const coordinate = viewport && viewport.unproject([x - viewport.x, y - viewport.y], {targetZ: z});\n\n  return {\n    color: null,\n    layer: null,\n    viewport,\n    index: -1,\n    picked: false,\n    x,\n    y,\n    pixel: [x, y],\n    coordinate,\n    devicePixel: pickInfo && [pickInfo.pickedX, pickInfo.pickedY],\n    pixelRatio\n  };\n}\n\n/* eslint-disable max-depth */\nexport function processPickInfo(opts) {\n  const {pickInfo, lastPickedInfo, mode, layers} = opts;\n  const {pickedColor, pickedLayer, pickedObjectIndex} = pickInfo;\n\n  const affectedLayers = pickedLayer ? [pickedLayer] : [];\n\n  if (mode === 'hover') {\n    // only invoke onHover events if picked object has changed\n    const lastPickedObjectIndex = lastPickedInfo.index;\n    const lastPickedLayerId = lastPickedInfo.layerId;\n    const pickedLayerId = pickedLayer && pickedLayer.props.id;\n\n    // proceed only if picked object changed\n    if (pickedLayerId !== lastPickedLayerId || pickedObjectIndex !== lastPickedObjectIndex) {\n      if (pickedLayerId !== lastPickedLayerId) {\n        // We cannot store a ref to lastPickedLayer in the context because\n        // the state of an outdated layer is no longer valid\n        // and the props may have changed\n        const lastPickedLayer = layers.find(layer => layer.props.id === lastPickedLayerId);\n        if (lastPickedLayer) {\n          // Let leave event fire before enter event\n          affectedLayers.unshift(lastPickedLayer);\n        }\n      }\n\n      // Update layer manager context\n      lastPickedInfo.layerId = pickedLayerId;\n      lastPickedInfo.index = pickedObjectIndex;\n      lastPickedInfo.info = null;\n    }\n  }\n\n  const baseInfo = getEmptyPickingInfo(opts);\n\n  // Use a Map to store all picking infos.\n  // The following two forEach loops are the result of\n  // https://github.com/visgl/deck.gl/issues/443\n  // Please be very careful when changing this pattern\n  const infos = new Map();\n\n  // Make sure infos always contain something even if no layer is affected\n  infos.set(null, baseInfo);\n\n  affectedLayers.forEach(layer => {\n    let info = {...baseInfo};\n\n    if (layer === pickedLayer) {\n      info.color = pickedColor;\n      info.index = pickedObjectIndex;\n      info.picked = true;\n    }\n\n    info = getLayerPickingInfo({layer, info, mode});\n\n    if (layer === pickedLayer && mode === 'hover') {\n      lastPickedInfo.info = info;\n    }\n\n    // This guarantees that there will be only one copy of info for\n    // one composite layer\n    infos.set(info.layer.id, info);\n\n    if (mode === 'hover') {\n      info.layer.updateAutoHighlight(info);\n    }\n  });\n\n  return infos;\n}\n\n// Walk up the layer composite chain to populate the info object\nexport function getLayerPickingInfo({layer, info, mode}) {\n  while (layer && info) {\n    // For a composite layer, sourceLayer will point to the sublayer\n    // where the event originates from.\n    // It provides additional context for the composite layer's\n    // getPickingInfo() method to populate the info object\n    const sourceLayer = info.layer || null;\n    info.sourceLayer = sourceLayer;\n    info.layer = layer;\n    // layer.pickLayer() function requires a non-null ```layer.state```\n    // object to function properly. So the layer referenced here\n    // must be the \"current\" layer, not an \"out-dated\" / \"invalidated\" layer\n    info = layer.getPickingInfo({info, mode, sourceLayer});\n    layer = layer.parent;\n  }\n  return info;\n}\n\n// Indentifies which viewport, if any corresponds to x and y\n// If multiple viewports contain the target pixel, last viewport drawn is returend\n// Returns first viewport if no match\nfunction getViewportFromCoordinates(viewports, pixel, filter) {\n  // find the last viewport that contains the pixel\n  for (let i = viewports.length - 1; i >= 0; i--) {\n    const viewport = viewports[i];\n    if (viewport.containsPixel(pixel) && (!filter || filter(viewport))) {\n      return viewport;\n    }\n  }\n  return viewports[0];\n}\n"]},"metadata":{},"sourceType":"module"}