{"ast":null,"code":"import { Framebuffer, Texture2D, isWebGL2, readPixelsToArray, cssToDeviceRatio, cssToDevicePixels } from '@luma.gl/core';\nimport log from '../utils/log';\nimport PickLayersPass from '../passes/pick-layers-pass';\nimport { getClosestObject, getUniqueObjects } from './picking/query-object';\nimport { processPickInfo, getLayerPickingInfo, getEmptyPickingInfo } from './picking/pick-info';\nexport default class DeckPicker {\n  constructor(gl) {\n    this.gl = gl;\n    this.pickingFBO = null;\n    this.pickLayersPass = new PickLayersPass(gl);\n    this.layerFilter = null;\n    this.lastPickedInfo = {\n      index: -1,\n      layerId: null,\n      info: null\n    };\n  }\n\n  setProps(props) {\n    if ('layerFilter' in props) {\n      this.layerFilter = props.layerFilter;\n    }\n\n    if ('_pickable' in props) {\n      this._pickable = props._pickable;\n    }\n  }\n\n  finalize() {\n    if (this.pickingFBO) {\n      this.pickingFBO.delete();\n    }\n\n    if (this.depthFBO) {\n      this.depthFBO.color.delete();\n      this.depthFBO.delete();\n    }\n  }\n\n  pickObject(opts) {\n    return this._pickClosestObject(opts);\n  }\n\n  pickObjects(opts) {\n    return this._pickVisibleObjects(opts);\n  }\n\n  getLastPickedObject({\n    x,\n    y,\n    layers,\n    viewports\n  }, lastPickedInfo = this.lastPickedInfo.info) {\n    const lastPickedLayerId = lastPickedInfo && lastPickedInfo.layer && lastPickedInfo.layer.id;\n    const lastPickedViewportId = lastPickedInfo && lastPickedInfo.viewport && lastPickedInfo.viewport.id;\n    const layer = lastPickedLayerId ? layers.find(l => l.id === lastPickedLayerId) : null;\n    const viewport = lastPickedViewportId && viewports.find(v => v.id === lastPickedViewportId) || viewports[0];\n    const coordinate = viewport && viewport.unproject([x - viewport.x, y - viewport.y]);\n    const info = {\n      x,\n      y,\n      viewport,\n      coordinate,\n      layer\n    };\n\n    if (layer) {\n      return { ...lastPickedInfo,\n        ...info\n      };\n    }\n\n    return Object.assign(info, {\n      color: null,\n      object: null,\n      index: -1\n    });\n  }\n\n  _resizeBuffer() {\n    const {\n      gl\n    } = this;\n\n    if (!this.pickingFBO) {\n      this.pickingFBO = new Framebuffer(gl);\n\n      if (Framebuffer.isSupported(gl, {\n        colorBufferFloat: true\n      })) {\n        this.depthFBO = new Framebuffer(gl);\n        this.depthFBO.attach({\n          [36064]: new Texture2D(gl, {\n            format: isWebGL2(gl) ? 34836 : 6408,\n            type: 5126\n          })\n        });\n      }\n    }\n\n    this.pickingFBO.resize({\n      width: gl.canvas.width,\n      height: gl.canvas.height\n    });\n\n    if (this.depthFBO) {\n      this.depthFBO.resize({\n        width: gl.canvas.width,\n        height: gl.canvas.height\n      });\n    }\n\n    return this.pickingFBO;\n  }\n\n  _getPickable(layers) {\n    if (this._pickable === false) {\n      return null;\n    }\n\n    const pickableLayers = layers.filter(layer => layer.isPickable() && !layer.isComposite);\n\n    if (pickableLayers.length > 255) {\n      log.warn('Too many pickable layers, only picking the first 255')();\n      return pickableLayers.slice(0, 255);\n    }\n\n    return pickableLayers.length ? pickableLayers : null;\n  }\n\n  _pickClosestObject({\n    layers,\n    views,\n    viewports,\n    x,\n    y,\n    radius = 0,\n    depth = 1,\n    mode = 'query',\n    unproject3D,\n    onViewportActive\n  }) {\n    layers = this._getPickable(layers);\n\n    if (!layers) {\n      return {\n        result: [],\n        emptyInfo: getEmptyPickingInfo({\n          viewports,\n          x,\n          y\n        })\n      };\n    }\n\n    this._resizeBuffer();\n\n    const pixelRatio = cssToDeviceRatio(this.gl);\n    const devicePixelRange = cssToDevicePixels(this.gl, [x, y], true);\n    const devicePixel = [devicePixelRange.x + Math.floor(devicePixelRange.width / 2), devicePixelRange.y + Math.floor(devicePixelRange.height / 2)];\n    const deviceRadius = Math.round(radius * pixelRatio);\n    const {\n      width,\n      height\n    } = this.pickingFBO;\n\n    const deviceRect = this._getPickingRect({\n      deviceX: devicePixel[0],\n      deviceY: devicePixel[1],\n      deviceRadius,\n      deviceWidth: width,\n      deviceHeight: height\n    });\n\n    let infos;\n    const result = [];\n    const affectedLayers = {};\n\n    for (let i = 0; i < depth; i++) {\n      const pickedColors = deviceRect && this._drawAndSample({\n        layers,\n        views,\n        viewports,\n        onViewportActive,\n        deviceRect,\n        pass: \"picking:\".concat(mode),\n        redrawReason: mode\n      });\n\n      const pickInfo = getClosestObject({\n        pickedColors,\n        layers,\n        deviceX: devicePixel[0],\n        deviceY: devicePixel[1],\n        deviceRadius,\n        deviceRect\n      });\n      let z;\n\n      if (pickInfo.pickedLayer && unproject3D && this.depthFBO) {\n        const zValues = this._drawAndSample({\n          layers: [pickInfo.pickedLayer],\n          views,\n          viewports,\n          onViewportActive,\n          deviceRect: {\n            x: pickInfo.pickedX,\n            y: pickInfo.pickedY,\n            width: 1,\n            height: 1\n          },\n          pass: \"picking:\".concat(mode),\n          redrawReason: 'pick-z',\n          pickZ: true\n        });\n\n        z = zValues[0] * viewports[0].distanceScales.metersPerUnit[2] + viewports[0].position[2];\n      }\n\n      if (pickInfo.pickedColor && i + 1 < depth) {\n        const layerId = pickInfo.pickedColor[3] - 1;\n        affectedLayers[layerId] = true;\n        layers[layerId].disablePickingIndex(pickInfo.pickedObjectIndex);\n      }\n\n      infos = processPickInfo({\n        pickInfo,\n        lastPickedInfo: this.lastPickedInfo,\n        mode,\n        layers,\n        layerFilter: this.layerFilter,\n        viewports,\n        x,\n        y,\n        z,\n        pixelRatio\n      });\n\n      for (const info of infos.values()) {\n        if (info.layer) {\n          result.push(info);\n        }\n      }\n\n      if (!pickInfo.pickedColor) {\n        break;\n      }\n    }\n\n    for (const layerId in affectedLayers) {\n      layers[layerId].restorePickingColors();\n    }\n\n    return {\n      result,\n      emptyInfo: infos && infos.get(null)\n    };\n  }\n\n  _pickVisibleObjects({\n    layers,\n    views,\n    viewports,\n    x,\n    y,\n    width = 1,\n    height = 1,\n    mode = 'query',\n    maxObjects = null,\n    onViewportActive\n  }) {\n    layers = this._getPickable(layers);\n\n    if (!layers) {\n      return [];\n    }\n\n    this._resizeBuffer();\n\n    const pixelRatio = cssToDeviceRatio(this.gl);\n    const leftTop = cssToDevicePixels(this.gl, [x, y], true);\n    const deviceLeft = leftTop.x;\n    const deviceTop = leftTop.y + leftTop.height;\n    const rightBottom = cssToDevicePixels(this.gl, [x + width, y + height], true);\n    const deviceRight = rightBottom.x + rightBottom.width;\n    const deviceBottom = rightBottom.y;\n    const deviceRect = {\n      x: deviceLeft,\n      y: deviceBottom,\n      width: deviceRight - deviceLeft,\n      height: deviceTop - deviceBottom\n    };\n\n    const pickedColors = this._drawAndSample({\n      layers,\n      views,\n      viewports,\n      onViewportActive,\n      deviceRect,\n      pass: \"picking:\".concat(mode),\n      redrawReason: mode\n    });\n\n    const pickInfos = getUniqueObjects({\n      pickedColors,\n      layers\n    });\n    const uniqueInfos = new Map();\n    const isMaxObjects = Number.isFinite(maxObjects);\n\n    for (let i = 0; i < pickInfos.length; i++) {\n      if (isMaxObjects && uniqueInfos.size >= maxObjects) {\n        break;\n      }\n\n      const pickInfo = pickInfos[i];\n      let info = {\n        color: pickInfo.pickedColor,\n        layer: null,\n        index: pickInfo.pickedObjectIndex,\n        picked: true,\n        x,\n        y,\n        width,\n        height,\n        pixelRatio\n      };\n      info = getLayerPickingInfo({\n        layer: pickInfo.pickedLayer,\n        info,\n        mode\n      });\n\n      if (!uniqueInfos.has(info.object)) {\n        uniqueInfos.set(info.object, info);\n      }\n    }\n\n    return Array.from(uniqueInfos.values());\n  }\n\n  _drawAndSample({\n    layers,\n    views,\n    viewports,\n    onViewportActive,\n    deviceRect,\n    pass,\n    redrawReason,\n    pickZ\n  }) {\n    if (layers.length < 1) {\n      return null;\n    }\n\n    const pickingFBO = pickZ ? this.depthFBO : this.pickingFBO;\n    this.pickLayersPass.render({\n      layers,\n      layerFilter: this.layerFilter,\n      views,\n      viewports,\n      onViewportActive,\n      pickingFBO,\n      deviceRect,\n      pass,\n      redrawReason,\n      pickZ\n    });\n    const {\n      x,\n      y,\n      width,\n      height\n    } = deviceRect;\n    const pickedColors = new (pickZ ? Float32Array : Uint8Array)(width * height * 4);\n    readPixelsToArray(pickingFBO, {\n      sourceX: x,\n      sourceY: y,\n      sourceWidth: width,\n      sourceHeight: height,\n      target: pickedColors\n    });\n    return pickedColors;\n  }\n\n  _getPickingRect({\n    deviceX,\n    deviceY,\n    deviceRadius,\n    deviceWidth,\n    deviceHeight\n  }) {\n    const x = Math.max(0, deviceX - deviceRadius);\n    const y = Math.max(0, deviceY - deviceRadius);\n    const width = Math.min(deviceWidth, deviceX + deviceRadius + 1) - x;\n    const height = Math.min(deviceHeight, deviceY + deviceRadius + 1) - y;\n\n    if (width <= 0 || height <= 0) {\n      return null;\n    }\n\n    return {\n      x,\n      y,\n      width,\n      height\n    };\n  }\n\n}","map":{"version":3,"sources":["../../../src/lib/deck-picker.js"],"names":["constructor","index","layerId","info","setProps","props","finalize","pickObject","pickObjects","getLastPickedObject","viewports","lastPickedInfo","lastPickedLayerId","lastPickedViewportId","layer","layers","l","viewport","v","coordinate","x","y","color","object","_resizeBuffer","gl","colorBufferFloat","format","isWebGL2","type","width","height","_getPickable","pickableLayers","log","_pickClosestObject","radius","depth","mode","onViewportActive","result","emptyInfo","getEmptyPickingInfo","pixelRatio","cssToDeviceRatio","devicePixelRange","cssToDevicePixels","devicePixel","Math","deviceRadius","deviceRect","deviceX","deviceY","deviceWidth","deviceHeight","affectedLayers","i","pickedColors","pass","redrawReason","pickInfo","getClosestObject","zValues","pickZ","z","infos","processPickInfo","layerFilter","_pickVisibleObjects","maxObjects","leftTop","deviceLeft","deviceTop","rightBottom","deviceRight","deviceBottom","pickInfos","getUniqueObjects","uniqueInfos","isMaxObjects","Number","picked","getLayerPickingInfo","Array","_drawAndSample","pickingFBO","readPixelsToArray","sourceX","sourceY","sourceWidth","sourceHeight","target","_getPickingRect"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Framebuffer,\n  Texture2D,\n  isWebGL2,\n  readPixelsToArray,\n  cssToDeviceRatio,\n  cssToDevicePixels\n} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\nimport log from '../utils/log';\nimport PickLayersPass from '../passes/pick-layers-pass';\nimport {getClosestObject, getUniqueObjects} from './picking/query-object';\nimport {processPickInfo, getLayerPickingInfo, getEmptyPickingInfo} from './picking/pick-info';\n\nexport default class DeckPicker {\n  constructor(gl) {\n    this.gl = gl;\n    this.pickingFBO = null;\n    this.pickLayersPass = new PickLayersPass(gl);\n    this.layerFilter = null;\n    this.lastPickedInfo = {\n      // For callback tracking and auto highlight\n      index: -1,\n      layerId: null,\n      info: null\n    };\n  }\n\n  setProps(props) {\n    if ('layerFilter' in props) {\n      this.layerFilter = props.layerFilter;\n    }\n\n    if ('_pickable' in props) {\n      this._pickable = props._pickable;\n    }\n  }\n\n  finalize() {\n    if (this.pickingFBO) {\n      this.pickingFBO.delete();\n    }\n    if (this.depthFBO) {\n      this.depthFBO.color.delete();\n      this.depthFBO.delete();\n    }\n  }\n\n  // Pick the closest info at given coordinate\n  pickObject(opts) {\n    return this._pickClosestObject(opts);\n  }\n\n  // Get all unique infos within a bounding box\n  pickObjects(opts) {\n    return this._pickVisibleObjects(opts);\n  }\n\n  // Returns a new picking info object by assuming the last picked object is still picked\n  getLastPickedObject({x, y, layers, viewports}, lastPickedInfo = this.lastPickedInfo.info) {\n    const lastPickedLayerId = lastPickedInfo && lastPickedInfo.layer && lastPickedInfo.layer.id;\n    const lastPickedViewportId =\n      lastPickedInfo && lastPickedInfo.viewport && lastPickedInfo.viewport.id;\n    const layer = lastPickedLayerId ? layers.find(l => l.id === lastPickedLayerId) : null;\n    const viewport =\n      (lastPickedViewportId && viewports.find(v => v.id === lastPickedViewportId)) || viewports[0];\n    const coordinate = viewport && viewport.unproject([x - viewport.x, y - viewport.y]);\n\n    const info = {\n      x,\n      y,\n      viewport,\n      coordinate,\n      layer\n    };\n\n    if (layer) {\n      return {...lastPickedInfo, ...info};\n    }\n    return Object.assign(info, {color: null, object: null, index: -1});\n  }\n\n  // Private\n  _resizeBuffer() {\n    const {gl} = this;\n\n    // Create a frame buffer if not already available\n    if (!this.pickingFBO) {\n      this.pickingFBO = new Framebuffer(gl);\n      if (Framebuffer.isSupported(gl, {colorBufferFloat: true})) {\n        this.depthFBO = new Framebuffer(gl);\n        this.depthFBO.attach({\n          [GL.COLOR_ATTACHMENT0]: new Texture2D(gl, {\n            format: isWebGL2(gl) ? GL.RGBA32F : GL.RGBA,\n            type: GL.FLOAT\n          })\n        });\n      }\n    }\n    // Resize it to current canvas size (this is a noop if size hasn't changed)\n    this.pickingFBO.resize({width: gl.canvas.width, height: gl.canvas.height});\n    if (this.depthFBO) {\n      this.depthFBO.resize({width: gl.canvas.width, height: gl.canvas.height});\n    }\n    return this.pickingFBO;\n  }\n\n  // picking can only handle up to 255 layers. Drop non-pickable/invisible layers from the list.\n  _getPickable(layers) {\n    if (this._pickable === false) {\n      return null;\n    }\n    const pickableLayers = layers.filter(layer => layer.isPickable() && !layer.isComposite);\n    if (pickableLayers.length > 255) {\n      log.warn('Too many pickable layers, only picking the first 255')();\n      return pickableLayers.slice(0, 255);\n    }\n    return pickableLayers.length ? pickableLayers : null;\n  }\n\n  // Pick the closest object at the given (x,y) coordinate\n  // eslint-disable-next-line max-statements,complexity\n  _pickClosestObject({\n    layers,\n    views,\n    viewports,\n    x,\n    y,\n    radius = 0,\n    depth = 1,\n    mode = 'query',\n    unproject3D,\n    onViewportActive\n  }) {\n    layers = this._getPickable(layers);\n\n    if (!layers) {\n      return {\n        result: [],\n        emptyInfo: getEmptyPickingInfo({viewports, x, y})\n      };\n    }\n\n    this._resizeBuffer();\n\n    // Convert from canvas top-left to WebGL bottom-left coordinates\n    // Top-left coordinates [x, y] to bottom-left coordinates [deviceX, deviceY]\n    // And compensate for pixelRatio\n    const pixelRatio = cssToDeviceRatio(this.gl);\n    const devicePixelRange = cssToDevicePixels(this.gl, [x, y], true);\n    const devicePixel = [\n      devicePixelRange.x + Math.floor(devicePixelRange.width / 2),\n      devicePixelRange.y + Math.floor(devicePixelRange.height / 2)\n    ];\n\n    const deviceRadius = Math.round(radius * pixelRatio);\n    const {width, height} = this.pickingFBO;\n    const deviceRect = this._getPickingRect({\n      deviceX: devicePixel[0],\n      deviceY: devicePixel[1],\n      deviceRadius,\n      deviceWidth: width,\n      deviceHeight: height\n    });\n\n    let infos;\n    const result = [];\n    const affectedLayers = {};\n\n    for (let i = 0; i < depth; i++) {\n      const pickedColors =\n        deviceRect &&\n        this._drawAndSample({\n          layers,\n          views,\n          viewports,\n          onViewportActive,\n          deviceRect,\n          pass: `picking:${mode}`,\n          redrawReason: mode\n        });\n\n      const pickInfo = getClosestObject({\n        pickedColors,\n        layers,\n        deviceX: devicePixel[0],\n        deviceY: devicePixel[1],\n        deviceRadius,\n        deviceRect\n      });\n\n      let z;\n      if (pickInfo.pickedLayer && unproject3D && this.depthFBO) {\n        const zValues = this._drawAndSample({\n          layers: [pickInfo.pickedLayer],\n          views,\n          viewports,\n          onViewportActive,\n          deviceRect: {x: pickInfo.pickedX, y: pickInfo.pickedY, width: 1, height: 1},\n          pass: `picking:${mode}`,\n          redrawReason: 'pick-z',\n          pickZ: true\n        });\n        // picked value is in common space (pixels) from the camera target (viewport.position)\n        // convert it to meters from the ground\n        z = zValues[0] * viewports[0].distanceScales.metersPerUnit[2] + viewports[0].position[2];\n      }\n\n      // Only exclude if we need to run picking again.\n      // We need to run picking again if an object is detected AND\n      // we have not exhausted the requested depth.\n      if (pickInfo.pickedColor && i + 1 < depth) {\n        const layerId = pickInfo.pickedColor[3] - 1;\n        affectedLayers[layerId] = true;\n        layers[layerId].disablePickingIndex(pickInfo.pickedObjectIndex);\n      }\n\n      // This logic needs to run even if no object is picked.\n      infos = processPickInfo({\n        pickInfo,\n        lastPickedInfo: this.lastPickedInfo,\n        mode,\n        layers,\n        layerFilter: this.layerFilter,\n        viewports,\n        x,\n        y,\n        z,\n        pixelRatio\n      });\n\n      for (const info of infos.values()) {\n        if (info.layer) {\n          result.push(info);\n        }\n      }\n\n      // If no object is picked stop.\n      if (!pickInfo.pickedColor) {\n        break;\n      }\n    }\n\n    // reset only affected buffers\n    for (const layerId in affectedLayers) {\n      layers[layerId].restorePickingColors();\n    }\n\n    return {result, emptyInfo: infos && infos.get(null)};\n  }\n\n  // Pick all objects within the given bounding box\n  _pickVisibleObjects({\n    layers,\n    views,\n    viewports,\n    x,\n    y,\n    width = 1,\n    height = 1,\n    mode = 'query',\n    maxObjects = null,\n    onViewportActive\n  }) {\n    layers = this._getPickable(layers);\n\n    if (!layers) {\n      return [];\n    }\n\n    this._resizeBuffer();\n    // Convert from canvas top-left to WebGL bottom-left coordinates\n    // And compensate for pixelRatio\n    const pixelRatio = cssToDeviceRatio(this.gl);\n    const leftTop = cssToDevicePixels(this.gl, [x, y], true);\n\n    // take left and top (y inverted in device pixels) from start location\n    const deviceLeft = leftTop.x;\n    const deviceTop = leftTop.y + leftTop.height;\n\n    // take right and bottom (y inverted in device pixels) from end location\n    const rightBottom = cssToDevicePixels(this.gl, [x + width, y + height], true);\n    const deviceRight = rightBottom.x + rightBottom.width;\n    const deviceBottom = rightBottom.y;\n\n    const deviceRect = {\n      x: deviceLeft,\n      y: deviceBottom,\n      // deviceTop and deviceRight represent the first pixel outside the desired rect\n      width: deviceRight - deviceLeft,\n      height: deviceTop - deviceBottom\n    };\n\n    const pickedColors = this._drawAndSample({\n      layers,\n      views,\n      viewports,\n      onViewportActive,\n      deviceRect,\n      pass: `picking:${mode}`,\n      redrawReason: mode\n    });\n\n    const pickInfos = getUniqueObjects({pickedColors, layers});\n\n    // Only return unique infos, identified by info.object\n    const uniqueInfos = new Map();\n\n    const isMaxObjects = Number.isFinite(maxObjects);\n\n    for (let i = 0; i < pickInfos.length; i++) {\n      if (isMaxObjects && uniqueInfos.size >= maxObjects) {\n        break;\n      }\n      const pickInfo = pickInfos[i];\n      let info = {\n        color: pickInfo.pickedColor,\n        layer: null,\n        index: pickInfo.pickedObjectIndex,\n        picked: true,\n        x,\n        y,\n        width,\n        height,\n        pixelRatio\n      };\n\n      info = getLayerPickingInfo({layer: pickInfo.pickedLayer, info, mode});\n      if (!uniqueInfos.has(info.object)) {\n        uniqueInfos.set(info.object, info);\n      }\n    }\n\n    return Array.from(uniqueInfos.values());\n  }\n\n  // returns pickedColor or null if no pickable layers found.\n  _drawAndSample({\n    layers,\n    views,\n    viewports,\n    onViewportActive,\n    deviceRect,\n    pass,\n    redrawReason,\n    pickZ\n  }) {\n    if (layers.length < 1) {\n      return null;\n    }\n\n    const pickingFBO = pickZ ? this.depthFBO : this.pickingFBO;\n\n    this.pickLayersPass.render({\n      layers,\n      layerFilter: this.layerFilter,\n      views,\n      viewports,\n      onViewportActive,\n      pickingFBO,\n      deviceRect,\n      pass,\n      redrawReason,\n      pickZ\n    });\n\n    // Read from an already rendered picking buffer\n    // Returns an Uint8ClampedArray of picked pixels\n    const {x, y, width, height} = deviceRect;\n    const pickedColors = new (pickZ ? Float32Array : Uint8Array)(width * height * 4);\n    readPixelsToArray(pickingFBO, {\n      sourceX: x,\n      sourceY: y,\n      sourceWidth: width,\n      sourceHeight: height,\n      target: pickedColors\n    });\n\n    return pickedColors;\n  }\n\n  // Calculate a picking rect centered on deviceX and deviceY and clipped to device\n  // Returns null if pixel is outside of device\n  _getPickingRect({deviceX, deviceY, deviceRadius, deviceWidth, deviceHeight}) {\n    // Create a box of size `radius * 2 + 1` centered at [deviceX, deviceY]\n    const x = Math.max(0, deviceX - deviceRadius);\n    const y = Math.max(0, deviceY - deviceRadius);\n    const width = Math.min(deviceWidth, deviceX + deviceRadius + 1) - x;\n    const height = Math.min(deviceHeight, deviceY + deviceRadius + 1) - y;\n\n    // x, y out of bounds.\n    if (width <= 0 || height <= 0) {\n      return null;\n    }\n\n    return {x, y, width, height};\n  }\n}\n"]},"metadata":{},"sourceType":"module"}