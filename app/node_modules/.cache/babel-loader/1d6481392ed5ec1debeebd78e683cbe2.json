{"ast":null,"code":"import LayersPass from './layers-pass';\nimport { withParameters } from '@luma.gl/core';\nconst PICKING_PARAMETERS = {\n  blendFunc: [1, 0, 32771, 0],\n  blendEquation: 32774\n};\nexport default class PickLayersPass extends LayersPass {\n  render(props) {\n    if (props.pickingFBO) {\n      this.useAlpha = true;\n\n      this._drawPickingBuffer(props);\n    } else {\n      this.useAlpha = false;\n      super.render(props);\n    }\n  }\n\n  _drawPickingBuffer({\n    layers,\n    layerFilter,\n    views,\n    viewports,\n    onViewportActive,\n    pickingFBO,\n    deviceRect: {\n      x,\n      y,\n      width,\n      height\n    },\n    pass = 'picking',\n    redrawReason,\n    pickZ\n  }) {\n    const gl = this.gl;\n    this.pickZ = pickZ;\n    return withParameters(gl, {\n      scissorTest: true,\n      scissor: [x, y, width, height],\n      clearColor: [0, 0, 0, 0],\n      depthMask: true,\n      depthTest: true,\n      depthRange: [0, 1],\n      colorMask: [true, true, true, true],\n      ...PICKING_PARAMETERS,\n      blend: !pickZ\n    }, () => {\n      super.render({\n        target: pickingFBO,\n        layers,\n        layerFilter,\n        views,\n        viewports,\n        onViewportActive,\n        pass,\n        redrawReason\n      });\n    });\n  }\n\n  shouldDrawLayer(layer) {\n    return layer.props.pickable;\n  }\n\n  getModuleParameters() {\n    return {\n      pickingActive: 1,\n      pickingAttribute: this.pickZ,\n      lightSources: {}\n    };\n  }\n\n  getLayerParameters(layer, layerIndex) {\n    const pickParameters = this.pickZ ? {\n      blend: false\n    } : { ...PICKING_PARAMETERS,\n      blend: true,\n      blendColor: [0, 0, 0, this.useAlpha ? (layerIndex + 1) / 255 : 1]\n    };\n    return { ...layer.props.parameters,\n      ...pickParameters\n    };\n  }\n\n}","map":{"version":3,"sources":["../../../src/passes/pick-layers-pass.js"],"names":["PICKING_PARAMETERS","blendFunc","blendEquation","render","props","_drawPickingBuffer","deviceRect","height","pass","pickZ","gl","withParameters","scissorTest","scissor","clearColor","depthMask","depthTest","depthRange","colorMask","blend","target","redrawReason","shouldDrawLayer","layer","getModuleParameters","pickingActive","pickingAttribute","lightSources","getLayerParameters","pickParameters","blendColor","layerIndex"],"mappings":"AAAA,OAAA,UAAA,MAAA,eAAA;AACA,SAAA,cAAA,QAAA,eAAA;AAGA,MAAMA,kBAAkB,GAAG;AACzBC,EAAAA,SAAS,EAAE,CAAA,CAAA,EAAA,CAAA,EAAA,KAAA,EADc,CACd,CADc;AAEzBC,EAAAA,aAAa,EAAA;AAFY,CAA3B;AAKA,eAAe,MAAA,cAAA,SAAA,UAAA,CAAwC;AACrDC,EAAAA,MAAM,CAAA,KAAA,EAAQ;AACZ,QAAIC,KAAK,CAAT,UAAA,EAAsB;AAEpB,WAAA,QAAA,GAAA,IAAA;;AACA,WAAA,kBAAA,CAAA,KAAA;AAHF,KAAA,MAIO;AAEL,WAAA,QAAA,GAAA,KAAA;AACA,YAAA,MAAA,CAAA,KAAA;AACD;AACF;;AAKDC,EAAAA,kBAAkB,CAAC;AAAA,IAAA,MAAA;AAAA,IAAA,WAAA;AAAA,IAAA,KAAA;AAAA,IAAA,SAAA;AAAA,IAAA,gBAAA;AAAA,IAAA,UAAA;AAOjBC,IAAAA,UAAU,EAAE;AAAA,MAAA,CAAA;AAAA,MAAA,CAAA;AAAA,MAAA,KAAA;AAAcC,MAAAA;AAAd,KAPK;AAQjBC,IAAAA,IAAI,GARa,SAAA;AAAA,IAAA,YAAA;AAUjBC,IAAAA;AAViB,GAAD,EAWf;AACD,UAAMC,EAAE,GAAG,KAAX,EAAA;AACA,SAAA,KAAA,GAAA,KAAA;AAOA,WAAOC,cAAc,CAAA,EAAA,EAEnB;AACEC,MAAAA,WAAW,EADb,IAAA;AAEEC,MAAAA,OAAO,EAAE,CAAA,CAAA,EAAA,CAAA,EAAA,KAAA,EAFX,MAEW,CAFX;AAGEC,MAAAA,UAAU,EAAE,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAHd,CAGc,CAHd;AAOEC,MAAAA,SAAS,EAPX,IAAA;AAQEC,MAAAA,SAAS,EARX,IAAA;AASEC,MAAAA,UAAU,EAAE,CAAA,CAAA,EATd,CASc,CATd;AAUEC,MAAAA,SAAS,EAAE,CAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAVb,IAUa,CAVb;AAYE,SAZF,kBAAA;AAaEC,MAAAA,KAAK,EAAE,CAACV;AAbV,KAFmB,EAiBnB,MAAM;AACJ,YAAA,MAAA,CAAa;AACXW,QAAAA,MAAM,EADK,UAAA;AAAA,QAAA,MAAA;AAAA,QAAA,WAAA;AAAA,QAAA,KAAA;AAAA,QAAA,SAAA;AAAA,QAAA,gBAAA;AAAA,QAAA,IAAA;AAQXC,QAAAA;AARW,OAAb;AAlBJ,KAAqB,CAArB;AA8BD;;AAGDC,EAAAA,eAAe,CAAA,KAAA,EAAQ;AACrB,WAAOC,KAAK,CAALA,KAAAA,CAAP,QAAA;AACD;;AAEDC,EAAAA,mBAAmB,GAAG;AACpB,WAAO;AACLC,MAAAA,aAAa,EADR,CAAA;AAELC,MAAAA,gBAAgB,EAAE,KAFb,KAAA;AAKLC,MAAAA,YAAY,EAAE;AALT,KAAP;AAOD;;AAEDC,EAAAA,kBAAkB,CAAA,KAAA,EAAA,UAAA,EAAoB;AAEpC,UAAMC,cAAc,GAAG,KAAA,KAAA,GACnB;AAACV,MAAAA,KAAK,EAAE;AAAR,KADmB,GAEnB,EACE,GADF,kBAAA;AAEEA,MAAAA,KAAK,EAFP,IAAA;AAGEW,MAAAA,UAAU,EAAE,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAU,KAAA,QAAA,GAAgB,CAACC,UAAU,GAAX,CAAA,IAAhB,GAAA,GAAV,CAAA;AAHd,KAFJ;AASA,WAAO,EACL,GAAGR,KAAK,CAALA,KAAAA,CADE,UAAA;AAEL,SAAGM;AAFE,KAAP;AAID;;AAlGoD","sourcesContent":["import LayersPass from './layers-pass';\nimport {withParameters} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\n\nconst PICKING_PARAMETERS = {\n  blendFunc: [GL.ONE, GL.ZERO, GL.CONSTANT_ALPHA, GL.ZERO],\n  blendEquation: GL.FUNC_ADD\n};\n\nexport default class PickLayersPass extends LayersPass {\n  render(props) {\n    if (props.pickingFBO) {\n      // When drawing into an off-screen buffer, use the alpha channel to encode layer index\n      this.useAlpha = true;\n      this._drawPickingBuffer(props);\n    } else {\n      // When drawing to screen (debug mode), do not use the alpha channel so that result is always visible\n      this.useAlpha = false;\n      super.render(props);\n    }\n  }\n\n  // Private\n  // Draws list of layers and viewports into the picking buffer\n  // Note: does not sample the buffer, that has to be done by the caller\n  _drawPickingBuffer({\n    layers,\n    layerFilter,\n    views,\n    viewports,\n    onViewportActive,\n    pickingFBO,\n    deviceRect: {x, y, width, height},\n    pass = 'picking',\n    redrawReason,\n    pickZ\n  }) {\n    const gl = this.gl;\n    this.pickZ = pickZ;\n\n    // Make sure we clear scissor test and fbo bindings in case of exceptions\n    // We are only interested in one pixel, no need to render anything else\n    // Note that the callback here is called synchronously.\n    // Set blend mode for picking\n    // always overwrite existing pixel with [r,g,b,layerIndex]\n    return withParameters(\n      gl,\n      {\n        scissorTest: true,\n        scissor: [x, y, width, height],\n        clearColor: [0, 0, 0, 0],\n        // When used as Mapbox custom layer, the context state may be dirty\n        // TODO - Remove when mapbox fixes this issue\n        // https://github.com/mapbox/mapbox-gl-js/issues/7801\n        depthMask: true,\n        depthTest: true,\n        depthRange: [0, 1],\n        colorMask: [true, true, true, true],\n        // Blending\n        ...PICKING_PARAMETERS,\n        blend: !pickZ\n      },\n      () => {\n        super.render({\n          target: pickingFBO,\n          layers,\n          layerFilter,\n          views,\n          viewports,\n          onViewportActive,\n          pass,\n          redrawReason\n        });\n      }\n    );\n  }\n\n  // PRIVATE\n  shouldDrawLayer(layer) {\n    return layer.props.pickable;\n  }\n\n  getModuleParameters() {\n    return {\n      pickingActive: 1,\n      pickingAttribute: this.pickZ,\n      // turn off lighting by adding empty light source object\n      // lights shader module relies on the `lightSources` to turn on/off lighting\n      lightSources: {}\n    };\n  }\n\n  getLayerParameters(layer, layerIndex) {\n    // These will override any layer parameters\n    const pickParameters = this.pickZ\n      ? {blend: false}\n      : {\n          ...PICKING_PARAMETERS,\n          blend: true,\n          blendColor: [0, 0, 0, this.useAlpha ? (layerIndex + 1) / 255 : 1]\n        };\n\n    // Override layer parameters with pick parameters\n    return {\n      ...layer.props.parameters,\n      ...pickParameters\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}