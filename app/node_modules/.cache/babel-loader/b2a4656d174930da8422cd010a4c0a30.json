{"ast":null,"code":"import ChildProcess from 'child_process';\nexport function getAvailablePort(defaultPort = 3000) {\n  return new Promise(resolve => {\n    ChildProcess.exec('lsof -i -P -n | grep LISTEN', (error, stdout) => {\n      if (error) {\n        resolve(defaultPort);\n        return;\n      }\n\n      const portsInUse = [];\n      const regex = /:(\\d+) \\(LISTEN\\)/;\n      stdout.split('\\n').forEach(line => {\n        const match = regex.exec(line);\n\n        if (match) {\n          portsInUse.push(Number(match[1]));\n        }\n      });\n      let port = defaultPort;\n\n      while (portsInUse.includes(port)) {\n        port++;\n      }\n\n      resolve(port);\n    });\n  });\n}","map":{"version":3,"sources":["../../../../src/lib/process-utils/process-utils.ts"],"names":["defaultPort","resolve","ChildProcess","portsInUse","regex","stdout","line","match","Number","port"],"mappings":"AAAA,OAAA,YAAA,MAAA,eAAA;AAIA,OAAO,SAAA,gBAAA,CAA0BA,WAAmB,GAA7C,IAAA,EAAuE;AAC5E,SAAO,IAAA,OAAA,CAAaC,OAAD,IAAa;AAE9BC,IAAAA,YAAY,CAAZA,IAAAA,CAAAA,6BAAAA,EAAiD,CAAA,KAAA,EAAA,MAAA,KAAmB;AAClE,UAAA,KAAA,EAAW;AAETD,QAAAA,OAAO,CAAPA,WAAO,CAAPA;AACA;AACD;;AAED,YAAME,UAAoB,GAA1B,EAAA;AACA,YAAMC,KAAK,GAAX,mBAAA;AACAC,MAAAA,MAAM,CAANA,KAAAA,CAAAA,IAAAA,EAAAA,OAAAA,CAA4BC,IAAD,IAAU;AACnC,cAAMC,KAAK,GAAGH,KAAK,CAALA,IAAAA,CAAd,IAAcA,CAAd;;AACA,YAAA,KAAA,EAAW;AACTD,UAAAA,UAAU,CAAVA,IAAAA,CAAgBK,MAAM,CAACD,KAAK,CAA5BJ,CAA4B,CAAN,CAAtBA;AACD;AAJHE,OAAAA;AAMA,UAAII,IAAI,GAAR,WAAA;;AACA,aAAON,UAAU,CAAVA,QAAAA,CAAP,IAAOA,CAAP,EAAkC;AAChCM,QAAAA,IAAI;AACL;;AACDR,MAAAA,OAAO,CAAPA,IAAO,CAAPA;AAnBFC,KAAAA;AAFF,GAAO,CAAP;AAwBD","sourcesContent":["import ChildProcess from 'child_process';\n\n// Get an available port\n// Works on Unix systems\nexport function getAvailablePort(defaultPort: number = 3000): Promise<number> {\n  return new Promise((resolve) => {\n    // Get a list of all ports in use\n    ChildProcess.exec('lsof -i -P -n | grep LISTEN', (error, stdout) => {\n      if (error) {\n        // likely no permission, e.g. CI\n        resolve(defaultPort);\n        return;\n      }\n\n      const portsInUse: number[] = [];\n      const regex = /:(\\d+) \\(LISTEN\\)/;\n      stdout.split('\\n').forEach((line) => {\n        const match = regex.exec(line);\n        if (match) {\n          portsInUse.push(Number(match[1]));\n        }\n      });\n      let port = defaultPort;\n      while (portsInUse.includes(port)) {\n        port++;\n      }\n      resolve(port);\n    });\n  });\n}\n"]},"metadata":{},"sourceType":"module"}