{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { spawn } from 'child_process';\nimport { getAvailablePort } from './process-utils';\nconst DEFAULT_PROPS = {\n  command: '',\n  arguments: [],\n  port: 5000,\n  autoPort: true,\n  wait: 2000,\n  onSuccess: processProxy => {\n    console.log(\"Started \".concat(processProxy.props.command));\n  }\n};\nexport default class ChildProcessProxy {\n  constructor({\n    id = 'browser-driver'\n  } = {}) {\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"props\", { ...DEFAULT_PROPS\n    });\n\n    _defineProperty(this, \"childProcess\", null);\n\n    _defineProperty(this, \"port\", 0);\n\n    _defineProperty(this, \"successTimer\", void 0);\n\n    this.id = id;\n  }\n\n  async start(props) {\n    props = { ...DEFAULT_PROPS,\n      ...props\n    };\n    this.props = props;\n    const args = [...props.arguments];\n    this.port = Number(props.port);\n\n    if (props.portArg) {\n      if (props.autoPort) {\n        this.port = await getAvailablePort(props.port);\n      }\n\n      args.push(props.portArg, String(this.port));\n    }\n\n    return await new Promise((resolve, reject) => {\n      try {\n        this._setTimeout(() => {\n          if (props.onSuccess) {\n            props.onSuccess(this);\n          }\n\n          resolve({});\n        });\n\n        console.log(\"Spawning \".concat(props.command, \" \").concat(props.arguments.join(' ')));\n        const childProcess = spawn(props.command, args, props.spawn);\n        this.childProcess = childProcess;\n        childProcess.stdout.on('data', data => {\n          console.log(data.toString());\n        });\n        childProcess.stderr.on('data', data => {\n          console.log(\"Child process wrote to stderr: \\\"\".concat(data, \"\\\".\"));\n\n          this._clearTimeout();\n\n          reject(new Error(data));\n        });\n        childProcess.on('error', error => {\n          console.log(\"Child process errored with \".concat(error));\n\n          this._clearTimeout();\n\n          reject(error);\n        });\n        childProcess.on('close', code => {\n          console.log(\"Child process exited with \".concat(code));\n          this.childProcess = null;\n\n          this._clearTimeout();\n\n          resolve({});\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  async stop() {\n    if (this.childProcess) {\n      this.childProcess.kill();\n      this.childProcess = null;\n    }\n  }\n\n  async exit(statusCode = 0) {\n    try {\n      await this.stop();\n      process.exit(statusCode);\n    } catch (error) {\n      console.error(error.message || error);\n      process.exit(1);\n    }\n  }\n\n  _setTimeout(callback) {\n    if (Number(this.props.wait) > 0) {\n      this.successTimer = setTimeout(callback, this.props.wait);\n    }\n  }\n\n  _clearTimeout() {\n    if (this.successTimer) {\n      clearTimeout(this.successTimer);\n    }\n  }\n\n}","map":{"version":3,"sources":["../../../../src/lib/process-utils/child-process-proxy.ts"],"names":["DEFAULT_PROPS","command","arguments","port","autoPort","wait","onSuccess","processProxy","console","constructor","id","start","props","args","Number","getAvailablePort","String","resolve","childProcess","spawn","data","reject","error","code","stop","exit","statusCode","process","_setTimeout","setTimeout","_clearTimeout","clearTimeout"],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\nimport {spawn, ChildProcess, SpawnOptionsWithoutStdio} from 'child_process';\nimport {getAvailablePort} from './process-utils';\n\nexport type ChildProcessProxyProps = {\n  command: string;\n  arguments: string[];\n  /** Whether to add a port specified arg */\n  portArg?: string;\n  /** Base port number */\n  port?: number;\n  /** Whether to search for an available port if the base port is occupied */\n  autoPort?: boolean;\n  /** Number of milliseconds to wait until concluding success */\n  /** wait: 0 - infinity */\n  wait?: number;\n  /** Options passed on to Node'.js `spawn` */\n  spawn?: SpawnOptionsWithoutStdio;\n  /** Callback when the  */\n  onStart?: (proxy: ChildProcessProxy) => void;\n  onSuccess?: (proxy: ChildProcessProxy) => void;\n};\n\nconst DEFAULT_PROPS: ChildProcessProxyProps = {\n  command: '',\n  arguments: [],\n  port: 5000,\n  autoPort: true,\n  wait: 2000,\n  onSuccess: (processProxy) => {\n    console.log(`Started ${processProxy.props.command}`);\n  }\n};\n\n/**\n * Manager for a Node.js child process\n * Prepares arguments, starts, stops and tracks output\n */\nexport default class ChildProcessProxy {\n  id: string;\n  props: ChildProcessProxyProps = {...DEFAULT_PROPS};\n  private childProcess: ChildProcess | null = null;\n  private port: number = 0;\n  private successTimer?;\n\n  // constructor(props?: {id?: string});\n  constructor({id = 'browser-driver'} = {}) {\n    this.id = id;\n  }\n\n  /** Starts a child process with the provided props */\n  async start(props: ChildProcessProxyProps): Promise<object> {\n    props = {...DEFAULT_PROPS, ...props};\n    this.props = props;\n\n    const args = [...props.arguments];\n\n    // If portArg is set, we can look up an available port\n    this.port = Number(props.port);\n    if (props.portArg) {\n      if (props.autoPort) {\n        this.port = await getAvailablePort(props.port);\n      }\n      args.push(props.portArg, String(this.port));\n    }\n\n    return await new Promise((resolve, reject) => {\n      try {\n        this._setTimeout(() => {\n          if (props.onSuccess) {\n            props.onSuccess(this);\n          }\n          resolve({});\n        });\n\n        console.log(`Spawning ${props.command} ${props.arguments.join(' ')}`);\n        const childProcess = spawn(props.command, args, props.spawn);\n        this.childProcess = childProcess;\n\n        childProcess.stdout.on('data', (data) => {\n          console.log(data.toString());\n        });\n        // TODO - add option regarding whether stderr should be treated as data\n        childProcess.stderr.on('data', (data) => {\n          console.log(`Child process wrote to stderr: \"${data}\".`);\n          this._clearTimeout();\n          reject(new Error(data));\n        });\n        childProcess.on('error', (error) => {\n          console.log(`Child process errored with ${error}`);\n          this._clearTimeout();\n          reject(error);\n        });\n        childProcess.on('close', (code) => {\n          console.log(`Child process exited with ${code}`);\n          this.childProcess = null;\n          this._clearTimeout();\n          resolve({});\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /** Stops a running child process */\n  async stop(): Promise<void> {\n    if (this.childProcess) {\n      this.childProcess.kill();\n      this.childProcess = null;\n    }\n  }\n\n  /** Exits this process */\n  async exit(statusCode: number = 0): Promise<void> {\n    try {\n      await this.stop();\n      // eslint-disable-next-line no-process-exit\n      process.exit(statusCode);\n    } catch (error) {\n      console.error(error.message || error);\n      // eslint-disable-next-line no-process-exit\n      process.exit(1);\n    }\n  }\n\n  _setTimeout(callback: (...args: any[]) => void) {\n    if (Number(this.props.wait) > 0) {\n      this.successTimer = setTimeout(callback, this.props.wait);\n    }\n  }\n\n  _clearTimeout() {\n    if (this.successTimer) {\n      clearTimeout(this.successTimer);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}