{"ast":null,"code":"import View from './view';\nimport Viewport from '../viewports/viewport';\nimport { Matrix4 } from 'math.gl';\nimport { pixelsToWorld } from '@math.gl/web-mercator';\nimport * as vec2 from 'gl-matrix/vec2';\nimport OrthographicController from '../controllers/orthographic-controller';\nconst viewMatrix = new Matrix4().lookAt({\n  eye: [0, 0, 1]\n});\n\nfunction getProjectionMatrix({\n  width,\n  height,\n  near,\n  far\n}) {\n  width = width || 1;\n  height = height || 1;\n  return new Matrix4().ortho({\n    left: -width / 2,\n    right: width / 2,\n    bottom: -height / 2,\n    top: height / 2,\n    near,\n    far\n  });\n}\n\nclass OrthographicViewport extends Viewport {\n  constructor(props) {\n    const {\n      width,\n      height,\n      near = 0.1,\n      far = 1000,\n      zoom = 0,\n      target = [0, 0, 0],\n      flipY = true\n    } = props;\n    const scale = Math.pow(2, zoom);\n    super({ ...props,\n      longitude: null,\n      position: target,\n      viewMatrix: viewMatrix.clone().scale([scale, scale * (flipY ? -1 : 1), scale]),\n      projectionMatrix: getProjectionMatrix({\n        width,\n        height,\n        near,\n        far\n      }),\n      zoom\n    });\n  }\n\n  panByPosition(coords, pixel) {\n    const fromLocation = pixelsToWorld(pixel, this.pixelUnprojectionMatrix);\n    const translate = vec2.add([], coords, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n    return {\n      target: newCenter\n    };\n  }\n\n}\n\nexport default class OrthographicView extends View {\n  constructor(props) {\n    super({ ...props,\n      type: OrthographicViewport\n    });\n  }\n\n  get controller() {\n    return this._getControllerProps({\n      type: OrthographicController\n    });\n  }\n\n}\nOrthographicView.displayName = 'OrthographicView';","map":{"version":3,"sources":["../../../src/views/orthographic-view.js"],"names":["viewMatrix","eye","far","width","height","left","right","bottom","top","constructor","near","zoom","target","flipY","scale","Math","longitude","position","projectionMatrix","getProjectionMatrix","panByPosition","fromLocation","pixelsToWorld","translate","vec2","newCenter","type","OrthographicViewport","controller","OrthographicController","OrthographicView"],"mappings":"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","sourcesContent":["import View from './view';\nimport Viewport from '../viewports/viewport';\n\nimport {Matrix4} from 'math.gl';\nimport {pixelsToWorld} from '@math.gl/web-mercator';\nimport * as vec2 from 'gl-matrix/vec2';\nimport OrthographicController from '../controllers/orthographic-controller';\n\nconst viewMatrix = new Matrix4().lookAt({eye: [0, 0, 1]});\n\nfunction getProjectionMatrix({width, height, near, far}) {\n  // Make sure Matrix4.ortho doesn't crash on 0 width/height\n  width = width || 1;\n  height = height || 1;\n\n  return new Matrix4().ortho({\n    left: -width / 2,\n    right: width / 2,\n    bottom: -height / 2,\n    top: height / 2,\n    near,\n    far\n  });\n}\n\nclass OrthographicViewport extends Viewport {\n  constructor(props) {\n    const {\n      width,\n      height,\n      near = 0.1,\n      far = 1000,\n      zoom = 0,\n      target = [0, 0, 0],\n      flipY = true\n    } = props;\n    const scale = Math.pow(2, zoom);\n    super({\n      ...props,\n      // in case viewState contains longitude/latitude values,\n      // make sure that the base Viewport class does not treat this as a geospatial viewport\n      longitude: null,\n      position: target,\n      viewMatrix: viewMatrix.clone().scale([scale, scale * (flipY ? -1 : 1), scale]),\n      projectionMatrix: getProjectionMatrix({width, height, near, far}),\n      zoom\n    });\n  }\n\n  /* Needed by LinearInterpolator */\n  panByPosition(coords, pixel) {\n    const fromLocation = pixelsToWorld(pixel, this.pixelUnprojectionMatrix);\n\n    const translate = vec2.add([], coords, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n\n    return {target: newCenter};\n  }\n}\n\nexport default class OrthographicView extends View {\n  constructor(props) {\n    super({\n      ...props,\n      type: OrthographicViewport\n    });\n  }\n\n  get controller() {\n    return this._getControllerProps({\n      type: OrthographicController\n    });\n  }\n}\n\nOrthographicView.displayName = 'OrthographicView';\n"]},"metadata":{},"sourceType":"module"}