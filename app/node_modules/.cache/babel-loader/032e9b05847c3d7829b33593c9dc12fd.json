{"ast":null,"code":"import fs from 'fs';\nimport { toArrayBuffer } from './buffer-utils.node';\nimport { promisify } from 'util';\n\nconst error = fsFunction => () => {\n  throw new Error(\"\".concat(fsFunction, \" not available in browser\"));\n};\n\nexport const isSupported = Boolean(fs);\nexport const open = fs !== null && fs !== void 0 && fs.open ? promisify(fs.open) : error('fs.open');\nexport const close = fs !== null && fs !== void 0 && fs.close ? promisify(fs.close) : error('fs.close');\nexport const read = fs !== null && fs !== void 0 && fs.read ? promisify(fs.read) : error('fs.read');\nexport const readFile = fs !== null && fs !== void 0 && fs.readFile ? promisify(fs.readFile) : error('fs.readFile');\nexport const readFileSync = fs !== null && fs !== void 0 && fs.readFileSync ? fs.readFileSync : error('fs.readFileSync');\nexport const writeFile = fs !== null && fs !== void 0 && fs.writeFile ? promisify(fs.writeFile) : error('fs.writeFile');\nexport const writeFileSync = fs !== null && fs !== void 0 && fs.writeFileSync ? fs.writeFileSync : error('fs.writeFileSync');\nexport async function _readToArrayBuffer(fd, start, length) {\n  const buffer = Buffer.alloc(length);\n  const {\n    bytesRead\n  } = await read(fd, buffer, 0, length, start);\n\n  if (bytesRead !== length) {\n    throw new Error('fs.read failed');\n  }\n\n  return toArrayBuffer(buffer);\n}","map":{"version":3,"sources":["../../../../src/lib/node/fs.ts"],"names":["error","fsFunction","isSupported","Boolean","open","fs","promisify","close","read","readFile","readFileSync","writeFile","writeFileSync","buffer","Buffer","bytesRead","toArrayBuffer"],"mappings":"AACA,OAAA,EAAA,MAAA,IAAA;AACA,SAAA,aAAA,QAAA,qBAAA;AACA,SAAA,SAAA,QAAA,MAAA;;AAEA,MAAMA,KAAK,GAAIC,UAAD,IAAgB,MAAM;AAClC,QAAM,IAAA,KAAA,CAAA,GAAA,MAAA,CAAA,UAAA,EAAN,2BAAM,CAAA,CAAN;AADF,CAAA;;AAIA,OAAO,MAAMC,WAAW,GAAGC,OAAO,CAA3B,EAA2B,CAA3B;AAEP,OAAO,MAAMC,IAAI,GAAGC,EAAE,KAAFA,IAAAA,IAAAA,EAAE,KAAA,KAAFA,CAAAA,IAAAA,EAAE,CAAFA,IAAAA,GAAWC,SAAS,CAACD,EAAE,CAAvBA,IAAoB,CAApBA,GAAgCL,KAAK,CAAlD,SAAkD,CAAlD;AACP,OAAO,MAAMO,KAAK,GAAGF,EAAE,KAAFA,IAAAA,IAAAA,EAAE,KAAA,KAAFA,CAAAA,IAAAA,EAAE,CAAFA,KAAAA,GAAYC,SAAS,CAACD,EAAE,CAAxBA,KAAqB,CAArBA,GAAkCL,KAAK,CAArD,UAAqD,CAArD;AACP,OAAO,MAAMQ,IAAI,GAAGH,EAAE,KAAFA,IAAAA,IAAAA,EAAE,KAAA,KAAFA,CAAAA,IAAAA,EAAE,CAAFA,IAAAA,GAAWC,SAAS,CAACD,EAAE,CAAvBA,IAAoB,CAApBA,GAAgCL,KAAK,CAAlD,SAAkD,CAAlD;AAEP,OAAO,MAAMS,QAAQ,GAAGJ,EAAE,KAAFA,IAAAA,IAAAA,EAAE,KAAA,KAAFA,CAAAA,IAAAA,EAAE,CAAFA,QAAAA,GAAeC,SAAS,CAACD,EAAE,CAA3BA,QAAwB,CAAxBA,GAAwCL,KAAK,CAA9D,aAA8D,CAA9D;AACP,OAAO,MAAMU,YAAY,GAAGL,EAAE,KAAFA,IAAAA,IAAAA,EAAE,KAAA,KAAFA,CAAAA,IAAAA,EAAE,CAAFA,YAAAA,GAAmBA,EAAE,CAArBA,YAAAA,GAAqCL,KAAK,CAA/D,iBAA+D,CAA/D;AACP,OAAO,MAAMW,SAAS,GAAGN,EAAE,KAAFA,IAAAA,IAAAA,EAAE,KAAA,KAAFA,CAAAA,IAAAA,EAAE,CAAFA,SAAAA,GAAgBC,SAAS,CAACD,EAAE,CAA5BA,SAAyB,CAAzBA,GAA0CL,KAAK,CAAjE,cAAiE,CAAjE;AACP,OAAO,MAAMY,aAAa,GAAGP,EAAE,KAAFA,IAAAA,IAAAA,EAAE,KAAA,KAAFA,CAAAA,IAAAA,EAAE,CAAFA,aAAAA,GAAoBA,EAAE,CAAtBA,aAAAA,GAAuCL,KAAK,CAAlE,kBAAkE,CAAlE;AAEP,OAAO,eAAA,kBAAA,CAAA,EAAA,EAAA,KAAA,EAAA,MAAA,EAA6E;AAClF,QAAMa,MAAM,GAAGC,MAAM,CAANA,KAAAA,CAAf,MAAeA,CAAf;AACA,QAAM;AAACC,IAAAA;AAAD,MAAc,MAAMP,IAAI,CAAA,EAAA,EAAA,MAAA,EAAA,CAAA,EAAA,MAAA,EAA9B,KAA8B,CAA9B;;AACA,MAAIO,SAAS,KAAb,MAAA,EAA0B;AACxB,UAAM,IAAA,KAAA,CAAN,gBAAM,CAAN;AACD;;AACD,SAAOC,aAAa,CAApB,MAAoB,CAApB;AACD","sourcesContent":["// fs wrapper (promisified fs + avoids bundling fs in browsers)\nimport fs from 'fs';\nimport {toArrayBuffer} from './buffer-utils.node';\nimport {promisify} from 'util';\n\nconst error = (fsFunction) => () => {\n  throw new Error(`${fsFunction} not available in browser`);\n};\n\nexport const isSupported = Boolean(fs);\n\nexport const open = fs?.open ? promisify(fs.open) : error('fs.open');\nexport const close = fs?.close ? promisify(fs.close) : error('fs.close');\nexport const read = fs?.read ? promisify(fs.read) : error('fs.read');\n\nexport const readFile = fs?.readFile ? promisify(fs.readFile) : error('fs.readFile');\nexport const readFileSync = fs?.readFileSync ? fs.readFileSync : error('fs.readFileSync');\nexport const writeFile = fs?.writeFile ? promisify(fs.writeFile) : error('fs.writeFile');\nexport const writeFileSync = fs?.writeFileSync ? fs.writeFileSync : error('fs.writeFileSync');\n\nexport async function _readToArrayBuffer(fd: number, start: number, length: number) {\n  const buffer = Buffer.alloc(length);\n  const {bytesRead} = await read(fd, buffer, 0, length, start);\n  if (bytesRead !== length) {\n    throw new Error('fs.read failed');\n  }\n  return toArrayBuffer(buffer);\n}\n"]},"metadata":{},"sourceType":"module"}