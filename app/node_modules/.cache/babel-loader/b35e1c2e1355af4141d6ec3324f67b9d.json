{"ast":null,"code":"var _jsxFileName = \"/home/rage/Documents/projects/TicinoStars/app/src/Map.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useCallback } from 'react';\nimport DeckGL from '@deck.gl/react';\nimport { ScatterplotLayer } from '@deck.gl/layers';\nimport { StaticMap } from 'react-map-gl';\nimport { IconLayer } from '@deck.gl/layers';\nimport { MapboxLayer } from '@deck.gl/mapbox';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MAPBOX_TOKEN = \"pk.eyJ1IjoicmFnZTk5NyIsImEiOiJja3J4Zmd4dmcwcHR4Mm5uOHl0cXNxNWdhIn0.spr-aZIVDY4VGYCUh6K11w\";\nconst INITIAL_VIEW_STATE = {\n  longitude: 8.874958110344565,\n  latitude: 46.22002254055144,\n  zoom: 8.7,\n  pitch: 0,\n  bearing: 0\n};\nconst ICON_MAPPING = {\n  marker: {\n    x: 0,\n    y: 0,\n    width: 128,\n    height: 128,\n    mask: true\n  }\n};\nconst data = [{\n  position: [8.874958110344565, 46.22002254055144],\n  size: 100\n}];\n\nfunction Map() {\n  _s();\n\n  // DeckGL and mapbox will both draw into this WebGL context\n  const [glContext, setGLContext] = useState();\n  const deckRef = useRef(null);\n  const mapRef = useRef(null);\n  const onMapLoad = useCallback(() => {\n    const map = mapRef.current.getMap();\n    const deck = deckRef.current.deck; // You must initialize an empty deck.gl layer to prevent flashing\n\n    map.addLayer( // This id has to match the id of the deck.gl layer\n    new MapboxLayer({\n      id: \"my-scatterplot\",\n      deck\n    }), // Optionally define id from Mapbox layer stack under which to add deck layer\n    'beforeId');\n    map.addLayer( // This id has to match the id of the deck.gl layer\n    new IconLayer({\n      id: \"icon-layer\",\n      deck\n    }), // Optionally define id from Mapbox layer stack under which to add deck layer\n    'beforeId');\n  }, []);\n  const layers = [new ScatterplotLayer({\n    id: 'my-scatterplot',\n    data,\n    getPosition: d => d.position,\n    getRadius: d => d.size,\n    getFillColor: [0, 0, 0]\n  }), new IconLayer({\n    id: 'icon-layer',\n    data,\n    pickable: true,\n    // iconAtlas and iconMapping are required\n    // getIcon: return a string\n    iconAtlas: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/icon-atlas.png',\n    iconMapping: ICON_MAPPING,\n    getIcon: d => 'marker',\n    sizeScale: 15,\n    getPosition: d => d.coordinates,\n    getSize: d => 5,\n    getColor: d => [Math.sqrt(d.exits), 140, 0]\n  })];\n  return /*#__PURE__*/_jsxDEV(DeckGL // Resizing the map components yield to the wrong size of the map..\n  // width={'75vh'} \n  // height={'80vw'}\n  , {\n    ref: deckRef,\n    layers: layers,\n    initialViewState: INITIAL_VIEW_STATE,\n    controller: true,\n    onWebGLInitialized: setGLContext,\n    glOptions: {\n      /* To render vector tile polygons correctly */\n      stencil: true\n    },\n    children: glContext &&\n    /*#__PURE__*/\n\n    /* This is important: Mapbox must be instantiated after the WebGLContext is available */\n    _jsxDEV(StaticMap, {\n      ref: mapRef,\n      gl: glContext,\n      mapStyle: \"mapbox://styles/rage997/ckrwcnr5w1qg118qpghum80zk\",\n      mapboxApiAccessToken: MAPBOX_TOKEN,\n      onLoad: onMapLoad\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Map, \"9nIhgGe3KBZkQ4Qfv1snYnaGN9c=\");\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/home/rage/Documents/projects/TicinoStars/app/src/Map.js"],"names":["React","useState","useRef","useCallback","DeckGL","ScatterplotLayer","StaticMap","IconLayer","MapboxLayer","MAPBOX_TOKEN","INITIAL_VIEW_STATE","longitude","latitude","zoom","pitch","bearing","ICON_MAPPING","marker","x","y","width","height","mask","data","position","size","Map","glContext","setGLContext","deckRef","mapRef","onMapLoad","map","current","getMap","deck","addLayer","id","layers","getPosition","d","getRadius","getFillColor","pickable","iconAtlas","iconMapping","getIcon","sizeScale","coordinates","getSize","getColor","Math","sqrt","exits","stencil"],"mappings":"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","sourcesContent":["import React, {useState, useRef, useCallback} from 'react';\nimport DeckGL from '@deck.gl/react';\nimport {ScatterplotLayer} from '@deck.gl/layers';\nimport {StaticMap} from 'react-map-gl';\nimport {IconLayer} from '@deck.gl/layers';\nimport {MapboxLayer} from '@deck.gl/mapbox';\n\nconst MAPBOX_TOKEN = \"pk.eyJ1IjoicmFnZTk5NyIsImEiOiJja3J4Zmd4dmcwcHR4Mm5uOHl0cXNxNWdhIn0.spr-aZIVDY4VGYCUh6K11w\"\n\nconst INITIAL_VIEW_STATE = {\n  longitude: 8.874958110344565,\n  latitude: 46.22002254055144,\n  zoom: 8.7,\n  pitch: 0,\n  bearing: 0\n};\n\nconst ICON_MAPPING = {\n  marker: {x: 0, y: 0, width: 128, height: 128, mask: true}\n};\n\nconst data = [\n  {position: [8.874958110344565, 46.22002254055144], size: 100}\n];\n\nfunction Map() {\n  // DeckGL and mapbox will both draw into this WebGL context\n  const [glContext, setGLContext] = useState();\n  const deckRef = useRef(null);\n  const mapRef = useRef(null);\n\n  const onMapLoad = useCallback(() => {\n    const map = mapRef.current.getMap();\n    const deck = deckRef.current.deck;\n\n    // You must initialize an empty deck.gl layer to prevent flashing\n    map.addLayer(\n      // This id has to match the id of the deck.gl layer\n      new MapboxLayer({ id: \"my-scatterplot\", deck }),\n      // Optionally define id from Mapbox layer stack under which to add deck layer\n      'beforeId'\n    );\n    map.addLayer(\n      // This id has to match the id of the deck.gl layer\n      new IconLayer({ id: \"icon-layer\", deck }),\n      // Optionally define id from Mapbox layer stack under which to add deck layer\n      'beforeId'\n    );\n    \n  }, []);\n\n  const layers = [\n    new ScatterplotLayer({\n      id: 'my-scatterplot',\n      data,\n      getPosition: d => d.position,\n      getRadius: d => d.size,\n      getFillColor: [0, 0, 0]\n    }),\n    new IconLayer({\n      id: 'icon-layer',\n      data,\n      pickable: true,\n      // iconAtlas and iconMapping are required\n      // getIcon: return a string\n      iconAtlas: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/icon-atlas.png',\n      iconMapping: ICON_MAPPING,\n      getIcon: d => 'marker',\n  \n      sizeScale: 15,\n      getPosition: d => d.coordinates,\n      getSize: d => 5,\n      getColor: d => [Math.sqrt(d.exits), 140, 0]\n    })\n  ];\n\n\n  return (\n    <DeckGL\n      // Resizing the map components yield to the wrong size of the map..\n      // width={'75vh'} \n      // height={'80vw'}\n      ref={deckRef}\n      layers={layers}\n      initialViewState={INITIAL_VIEW_STATE}\n      controller={true}\n      onWebGLInitialized={setGLContext}\n      glOptions={{\n        /* To render vector tile polygons correctly */\n        stencil: true\n      }}\n    >\n      {glContext && (\n        /* This is important: Mapbox must be instantiated after the WebGLContext is available */\n        <StaticMap\n          ref={mapRef}\n          gl={glContext}\n          mapStyle=\"mapbox://styles/rage997/ckrwcnr5w1qg118qpghum80zk\"\n          mapboxApiAccessToken={MAPBOX_TOKEN}\n          onLoad={onMapLoad}\n        />\n      )}\n    </DeckGL>\n  );\n}\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}