{"ast":null,"code":"import * as mat4 from 'gl-matrix/mat4';\nimport * as vec4 from 'gl-matrix/vec4';\nimport { COORDINATE_SYSTEM, PROJECTION_MODE } from '../../lib/constants';\nimport memoize from '../../utils/memoize';\nconst ZERO_VECTOR = [0, 0, 0, 0];\nconst VECTOR_TO_POINT_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0];\nconst IDENTITY_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\nconst DEFAULT_PIXELS_PER_UNIT2 = [0, 0, 0];\nconst DEFAULT_COORDINATE_ORIGIN = [0, 0, 0];\nconst getMemoizedViewportUniforms = memoize(calculateViewportUniforms);\nexport function getOffsetOrigin(viewport, coordinateSystem, coordinateOrigin = DEFAULT_COORDINATE_ORIGIN) {\n  let shaderCoordinateOrigin = coordinateOrigin;\n  let geospatialOrigin;\n  let offsetMode = true;\n\n  if (coordinateSystem === COORDINATE_SYSTEM.LNGLAT_OFFSETS || coordinateSystem === COORDINATE_SYSTEM.METER_OFFSETS) {\n    geospatialOrigin = coordinateOrigin;\n  } else {\n    geospatialOrigin = viewport.isGeospatial ? [Math.fround(viewport.longitude), Math.fround(viewport.latitude), 0] : null;\n  }\n\n  switch (viewport.projectionMode) {\n    case PROJECTION_MODE.WEB_MERCATOR:\n      if (coordinateSystem === COORDINATE_SYSTEM.LNGLAT || coordinateSystem === COORDINATE_SYSTEM.CARTESIAN) {\n        offsetMode = false;\n      }\n\n      break;\n\n    case PROJECTION_MODE.WEB_MERCATOR_AUTO_OFFSET:\n      if (coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n        shaderCoordinateOrigin = geospatialOrigin;\n      } else if (coordinateSystem === COORDINATE_SYSTEM.CARTESIAN) {\n        shaderCoordinateOrigin = [Math.fround(viewport.center[0]), Math.fround(viewport.center[1]), 0];\n        geospatialOrigin = viewport.unprojectPosition(shaderCoordinateOrigin);\n        shaderCoordinateOrigin[0] -= coordinateOrigin[0];\n        shaderCoordinateOrigin[1] -= coordinateOrigin[1];\n        shaderCoordinateOrigin[2] -= coordinateOrigin[2];\n      }\n\n      break;\n\n    case PROJECTION_MODE.IDENTITY:\n      shaderCoordinateOrigin = viewport.position.map(Math.fround);\n      break;\n\n    case PROJECTION_MODE.GLOBE:\n      offsetMode = false;\n      geospatialOrigin = null;\n      break;\n\n    default:\n      offsetMode = false;\n  }\n\n  shaderCoordinateOrigin[2] = shaderCoordinateOrigin[2] || 0;\n  return {\n    geospatialOrigin,\n    shaderCoordinateOrigin,\n    offsetMode\n  };\n}\n\nfunction calculateMatrixAndOffset(viewport, coordinateSystem, coordinateOrigin) {\n  const {\n    viewMatrixUncentered,\n    projectionMatrix\n  } = viewport;\n  let {\n    viewMatrix,\n    viewProjectionMatrix\n  } = viewport;\n  let projectionCenter = ZERO_VECTOR;\n  let cameraPosCommon = viewport.cameraPosition;\n  const {\n    geospatialOrigin,\n    shaderCoordinateOrigin,\n    offsetMode\n  } = getOffsetOrigin(viewport, coordinateSystem, coordinateOrigin);\n\n  if (offsetMode) {\n    const positionCommonSpace = viewport.projectPosition(geospatialOrigin || shaderCoordinateOrigin);\n    cameraPosCommon = [cameraPosCommon[0] - positionCommonSpace[0], cameraPosCommon[1] - positionCommonSpace[1], cameraPosCommon[2] - positionCommonSpace[2]];\n    positionCommonSpace[3] = 1;\n    projectionCenter = vec4.transformMat4([], positionCommonSpace, viewProjectionMatrix);\n    viewMatrix = viewMatrixUncentered || viewMatrix;\n    viewProjectionMatrix = mat4.multiply([], projectionMatrix, viewMatrix);\n    viewProjectionMatrix = mat4.multiply([], viewProjectionMatrix, VECTOR_TO_POINT_MATRIX);\n  }\n\n  return {\n    viewMatrix,\n    viewProjectionMatrix,\n    projectionCenter,\n    cameraPosCommon,\n    shaderCoordinateOrigin,\n    geospatialOrigin\n  };\n}\n\nexport function getUniformsFromViewport({\n  viewport,\n  devicePixelRatio = 1,\n  modelMatrix = null,\n  coordinateSystem = COORDINATE_SYSTEM.DEFAULT,\n  coordinateOrigin,\n  autoWrapLongitude = false\n} = {}) {\n  if (coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n    coordinateSystem = viewport.isGeospatial ? COORDINATE_SYSTEM.LNGLAT : COORDINATE_SYSTEM.CARTESIAN;\n  }\n\n  const uniforms = getMemoizedViewportUniforms({\n    viewport,\n    devicePixelRatio,\n    coordinateSystem,\n    coordinateOrigin\n  });\n  uniforms.project_uWrapLongitude = autoWrapLongitude;\n  uniforms.project_uModelMatrix = modelMatrix || IDENTITY_MATRIX;\n  return uniforms;\n}\n\nfunction calculateViewportUniforms({\n  viewport,\n  devicePixelRatio,\n  coordinateSystem,\n  coordinateOrigin\n}) {\n  const {\n    projectionCenter,\n    viewProjectionMatrix,\n    cameraPosCommon,\n    shaderCoordinateOrigin,\n    geospatialOrigin\n  } = calculateMatrixAndOffset(viewport, coordinateSystem, coordinateOrigin);\n  const distanceScales = viewport.getDistanceScales();\n  const viewportSize = [viewport.width * devicePixelRatio, viewport.height * devicePixelRatio];\n  const focalDistance = viewport.projectionMatrix.transform([0, 0, -viewport.focalDistance, 1])[3] || 1;\n  const uniforms = {\n    project_uCoordinateSystem: coordinateSystem,\n    project_uProjectionMode: viewport.projectionMode,\n    project_uCoordinateOrigin: shaderCoordinateOrigin,\n    project_uCenter: projectionCenter,\n    project_uViewportSize: viewportSize,\n    project_uDevicePixelRatio: devicePixelRatio,\n    project_uFocalDistance: focalDistance,\n    project_uCommonUnitsPerMeter: distanceScales.unitsPerMeter,\n    project_uCommonUnitsPerWorldUnit: distanceScales.unitsPerMeter,\n    project_uCommonUnitsPerWorldUnit2: DEFAULT_PIXELS_PER_UNIT2,\n    project_uScale: viewport.scale,\n    project_uViewProjectionMatrix: viewProjectionMatrix,\n    project_uCameraPosition: cameraPosCommon\n  };\n\n  if (geospatialOrigin) {\n    const distanceScalesAtOrigin = viewport.getDistanceScales(geospatialOrigin);\n\n    switch (coordinateSystem) {\n      case COORDINATE_SYSTEM.METER_OFFSETS:\n        uniforms.project_uCommonUnitsPerWorldUnit = distanceScalesAtOrigin.unitsPerMeter;\n        uniforms.project_uCommonUnitsPerWorldUnit2 = distanceScalesAtOrigin.unitsPerMeter2;\n        break;\n\n      case COORDINATE_SYSTEM.LNGLAT:\n      case COORDINATE_SYSTEM.LNGLAT_OFFSETS:\n        uniforms.project_uCommonUnitsPerWorldUnit = distanceScalesAtOrigin.unitsPerDegree;\n        uniforms.project_uCommonUnitsPerWorldUnit2 = distanceScalesAtOrigin.unitsPerDegree2;\n        break;\n\n      case COORDINATE_SYSTEM.CARTESIAN:\n        uniforms.project_uCommonUnitsPerWorldUnit = [1, 1, distanceScalesAtOrigin.unitsPerMeter[2]];\n        uniforms.project_uCommonUnitsPerWorldUnit2 = [0, 0, distanceScalesAtOrigin.unitsPerMeter2[2]];\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  return uniforms;\n}","map":{"version":3,"sources":["../../../../src/shaderlib/project/viewport-uniforms.js"],"names":["ZERO_VECTOR","VECTOR_TO_POINT_MATRIX","IDENTITY_MATRIX","DEFAULT_PIXELS_PER_UNIT2","DEFAULT_COORDINATE_ORIGIN","getMemoizedViewportUniforms","memoize","coordinateOrigin","shaderCoordinateOrigin","offsetMode","coordinateSystem","COORDINATE_SYSTEM","geospatialOrigin","viewport","Math","PROJECTION_MODE","projectionMatrix","viewProjectionMatrix","projectionCenter","cameraPosCommon","getOffsetOrigin","positionCommonSpace","vec4","viewMatrix","viewMatrixUncentered","mat4","devicePixelRatio","modelMatrix","autoWrapLongitude","uniforms","calculateMatrixAndOffset","distanceScales","viewportSize","focalDistance","project_uCoordinateSystem","project_uProjectionMode","project_uCoordinateOrigin","project_uCenter","project_uViewportSize","project_uDevicePixelRatio","project_uFocalDistance","project_uCommonUnitsPerMeter","project_uCommonUnitsPerWorldUnit","project_uCommonUnitsPerWorldUnit2","project_uScale","project_uViewProjectionMatrix","project_uCameraPosition","distanceScalesAtOrigin"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n/* eslint-disable complexity */\n\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec4 from 'gl-matrix/vec4';\n\nimport {COORDINATE_SYSTEM, PROJECTION_MODE} from '../../lib/constants';\n\nimport memoize from '../../utils/memoize';\n\n// To quickly set a vector to zero\nconst ZERO_VECTOR = [0, 0, 0, 0];\n// 4x4 matrix that drops 4th component of vector\nconst VECTOR_TO_POINT_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0];\nconst IDENTITY_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\nconst DEFAULT_PIXELS_PER_UNIT2 = [0, 0, 0];\nconst DEFAULT_COORDINATE_ORIGIN = [0, 0, 0];\n\nconst getMemoizedViewportUniforms = memoize(calculateViewportUniforms);\n\nexport function getOffsetOrigin(\n  viewport,\n  coordinateSystem,\n  coordinateOrigin = DEFAULT_COORDINATE_ORIGIN\n) {\n  let shaderCoordinateOrigin = coordinateOrigin;\n  let geospatialOrigin;\n  let offsetMode = true;\n\n  if (\n    coordinateSystem === COORDINATE_SYSTEM.LNGLAT_OFFSETS ||\n    coordinateSystem === COORDINATE_SYSTEM.METER_OFFSETS\n  ) {\n    geospatialOrigin = coordinateOrigin;\n  } else {\n    geospatialOrigin = viewport.isGeospatial\n      ? [Math.fround(viewport.longitude), Math.fround(viewport.latitude), 0]\n      : null;\n  }\n\n  switch (viewport.projectionMode) {\n    case PROJECTION_MODE.WEB_MERCATOR:\n      if (\n        coordinateSystem === COORDINATE_SYSTEM.LNGLAT ||\n        coordinateSystem === COORDINATE_SYSTEM.CARTESIAN\n      ) {\n        offsetMode = false;\n      }\n      break;\n\n    case PROJECTION_MODE.WEB_MERCATOR_AUTO_OFFSET:\n      if (coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n        // viewport center in world space\n        shaderCoordinateOrigin = geospatialOrigin;\n      } else if (coordinateSystem === COORDINATE_SYSTEM.CARTESIAN) {\n        // viewport center in common space\n        shaderCoordinateOrigin = [\n          Math.fround(viewport.center[0]),\n          Math.fround(viewport.center[1]),\n          0\n        ];\n        // Geospatial origin (wgs84) must match shaderCoordinateOrigin (common)\n        geospatialOrigin = viewport.unprojectPosition(shaderCoordinateOrigin);\n        shaderCoordinateOrigin[0] -= coordinateOrigin[0];\n        shaderCoordinateOrigin[1] -= coordinateOrigin[1];\n        shaderCoordinateOrigin[2] -= coordinateOrigin[2];\n      }\n      break;\n\n    case PROJECTION_MODE.IDENTITY:\n      shaderCoordinateOrigin = viewport.position.map(Math.fround);\n      break;\n\n    case PROJECTION_MODE.GLOBE:\n      offsetMode = false;\n      geospatialOrigin = null;\n      break;\n\n    default:\n      // Unknown projection mode\n      offsetMode = false;\n  }\n\n  shaderCoordinateOrigin[2] = shaderCoordinateOrigin[2] || 0;\n\n  return {geospatialOrigin, shaderCoordinateOrigin, offsetMode};\n}\n\n// The code that utilizes Matrix4 does the same calculation as their mat4 counterparts,\n// has lower performance but provides error checking.\nfunction calculateMatrixAndOffset(viewport, coordinateSystem, coordinateOrigin) {\n  const {viewMatrixUncentered, projectionMatrix} = viewport;\n  let {viewMatrix, viewProjectionMatrix} = viewport;\n\n  let projectionCenter = ZERO_VECTOR;\n  let cameraPosCommon = viewport.cameraPosition;\n  const {geospatialOrigin, shaderCoordinateOrigin, offsetMode} = getOffsetOrigin(\n    viewport,\n    coordinateSystem,\n    coordinateOrigin\n  );\n\n  if (offsetMode) {\n    // Calculate transformed projectionCenter (using 64 bit precision JS)\n    // This is the key to offset mode precision\n    // (avoids doing this addition in 32 bit precision in GLSL)\n    const positionCommonSpace = viewport.projectPosition(\n      geospatialOrigin || shaderCoordinateOrigin\n    );\n\n    cameraPosCommon = [\n      cameraPosCommon[0] - positionCommonSpace[0],\n      cameraPosCommon[1] - positionCommonSpace[1],\n      cameraPosCommon[2] - positionCommonSpace[2]\n    ];\n\n    positionCommonSpace[3] = 1;\n\n    // projectionCenter = new Matrix4(viewProjectionMatrix)\n    //   .transformVector([positionPixels[0], positionPixels[1], 0.0, 1.0]);\n    projectionCenter = vec4.transformMat4([], positionCommonSpace, viewProjectionMatrix);\n\n    // Always apply uncentered projection matrix if available (shader adds center)\n    viewMatrix = viewMatrixUncentered || viewMatrix;\n\n    // Zero out 4th coordinate (\"after\" model matrix) - avoids further translations\n    // viewMatrix = new Matrix4(viewMatrixUncentered || viewMatrix)\n    //   .multiplyRight(VECTOR_TO_POINT_MATRIX);\n    viewProjectionMatrix = mat4.multiply([], projectionMatrix, viewMatrix);\n    viewProjectionMatrix = mat4.multiply([], viewProjectionMatrix, VECTOR_TO_POINT_MATRIX);\n  }\n\n  return {\n    viewMatrix,\n    viewProjectionMatrix,\n    projectionCenter,\n    cameraPosCommon,\n    shaderCoordinateOrigin,\n    geospatialOrigin\n  };\n}\n\n/**\n * Returns uniforms for shaders based on current projection\n * includes: projection matrix suitable for shaders\n *\n * TODO - Ensure this works with any viewport, not just WebMercatorViewports\n *\n * @param {WebMercatorViewport} viewport -\n * @return {Float32Array} - 4x4 projection matrix that can be used in shaders\n */\nexport function getUniformsFromViewport({\n  viewport,\n  devicePixelRatio = 1,\n  modelMatrix = null,\n  // Match Layer.defaultProps\n  coordinateSystem = COORDINATE_SYSTEM.DEFAULT,\n  coordinateOrigin,\n  autoWrapLongitude = false\n} = {}) {\n  if (coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n    coordinateSystem = viewport.isGeospatial\n      ? COORDINATE_SYSTEM.LNGLAT\n      : COORDINATE_SYSTEM.CARTESIAN;\n  }\n\n  const uniforms = getMemoizedViewportUniforms({\n    viewport,\n    devicePixelRatio,\n    coordinateSystem,\n    coordinateOrigin\n  });\n\n  uniforms.project_uWrapLongitude = autoWrapLongitude;\n  uniforms.project_uModelMatrix = modelMatrix || IDENTITY_MATRIX;\n\n  return uniforms;\n}\n\nfunction calculateViewportUniforms({\n  viewport,\n  devicePixelRatio,\n  coordinateSystem,\n  coordinateOrigin\n}) {\n  const {\n    projectionCenter,\n    viewProjectionMatrix,\n    cameraPosCommon,\n    shaderCoordinateOrigin,\n    geospatialOrigin\n  } = calculateMatrixAndOffset(viewport, coordinateSystem, coordinateOrigin);\n\n  // Calculate projection pixels per unit\n  const distanceScales = viewport.getDistanceScales();\n\n  const viewportSize = [viewport.width * devicePixelRatio, viewport.height * devicePixelRatio];\n\n  // Distance at which screen pixels are projected.\n  // Used to scale sizes in clipspace to match screen pixels.\n  // When using Viewport class's default projection matrix, this yields 1 for orthographic\n  // and `viewport.focalDistance` for perspective views\n  const focalDistance =\n    viewport.projectionMatrix.transform([0, 0, -viewport.focalDistance, 1])[3] || 1;\n\n  const uniforms = {\n    // Projection mode values\n    project_uCoordinateSystem: coordinateSystem,\n    project_uProjectionMode: viewport.projectionMode,\n    project_uCoordinateOrigin: shaderCoordinateOrigin,\n    project_uCenter: projectionCenter,\n\n    // Screen size\n    project_uViewportSize: viewportSize,\n    project_uDevicePixelRatio: devicePixelRatio,\n\n    project_uFocalDistance: focalDistance,\n    project_uCommonUnitsPerMeter: distanceScales.unitsPerMeter,\n    project_uCommonUnitsPerWorldUnit: distanceScales.unitsPerMeter,\n    project_uCommonUnitsPerWorldUnit2: DEFAULT_PIXELS_PER_UNIT2,\n    project_uScale: viewport.scale, // This is the mercator scale (2 ** zoom)\n\n    project_uViewProjectionMatrix: viewProjectionMatrix,\n\n    // This is for lighting calculations\n    project_uCameraPosition: cameraPosCommon\n  };\n\n  if (geospatialOrigin) {\n    const distanceScalesAtOrigin = viewport.getDistanceScales(geospatialOrigin);\n    switch (coordinateSystem) {\n      case COORDINATE_SYSTEM.METER_OFFSETS:\n        uniforms.project_uCommonUnitsPerWorldUnit = distanceScalesAtOrigin.unitsPerMeter;\n        uniforms.project_uCommonUnitsPerWorldUnit2 = distanceScalesAtOrigin.unitsPerMeter2;\n        break;\n\n      case COORDINATE_SYSTEM.LNGLAT:\n      case COORDINATE_SYSTEM.LNGLAT_OFFSETS:\n        uniforms.project_uCommonUnitsPerWorldUnit = distanceScalesAtOrigin.unitsPerDegree;\n        uniforms.project_uCommonUnitsPerWorldUnit2 = distanceScalesAtOrigin.unitsPerDegree2;\n        break;\n\n      // a.k.a \"preprojected\" positions\n      case COORDINATE_SYSTEM.CARTESIAN:\n        uniforms.project_uCommonUnitsPerWorldUnit = [1, 1, distanceScalesAtOrigin.unitsPerMeter[2]];\n        uniforms.project_uCommonUnitsPerWorldUnit2 = [\n          0,\n          0,\n          distanceScalesAtOrigin.unitsPerMeter2[2]\n        ];\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  return uniforms;\n}\n"]},"metadata":{},"sourceType":"module"}